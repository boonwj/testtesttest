name: Deployment (UI)

# This is mock of the ui deployment

on:
  workflow_dispatch:
    inputs:
      env_type:
        description: 'env_type: dev, stg, or prd'
        required: true
        default: 'stg'
        type: choice
        options:
          - prd
          - stg
          - dev
          - sandbox
      is_maintenance:
        description: 'is_maintenance: true or false'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      maintenance_end_time:
        description: 'maintenance_end_time: epoch time in ms'

jobs:
  context:
    runs-on: ubuntu-latest
    steps:
      - name: Show All Context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "${GITHUB_CONTEXT}"

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check argument
        id: check_arg
        run: |
          is_maintenance=${{ github.event.inputs.is_maintenance }}
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            env_type=${{ github.event.inputs.env_type }}
            docker_tag=${{ github.event.inputs.env_type }}
            if ${{ github.event.inputs.is_maintenance == 'true' }}; then
              docker_tag+="-maintenance"
            fi
          else
            echo "This run should not have been triggered"
            exit 1
          fi

          echo "deploy_target=TCS-UI" >> $GITHUB_OUTPUT
          echo "env_type=${env_type}" >> $GITHUB_OUTPUT
          echo "env_type_cap=${env_type^^}" >> $GITHUB_OUTPUT
          echo "docker_tag=${docker_tag}" >> $GITHUB_OUTPUT
          echo "is_maintenance=${is_maintenance}" >> $GITHUB_OUTPUT

      - name: Store build time
        id: build_time
        run: |
          build_time=`date +%s%N | cut -b1-13`
          echo "build_time=${build_time}" >> $GITHUB_OUTPUT

      - name: Approval for PRD deployments
        if: ${{ github.event.inputs.env_type == 'prd' }}
        uses: trstringer/manual-approval@v1
        timeout-minutes: 15
        with:
          secret: ${{ github.TOKEN }}
          approvers: boonwj,bnew11245
          minimum-approvals: 1
          issue-title: >-
            Deploy ${{ steps.check_arg.outputs.env_type_cap }} to ${{ github.ref_name }}
            ${{ steps.check_arg.outputs.deploy_target }}
          issue-body: |
            Workflow Name: ${{ github.workflow }}
            Triggered by: ${{ github.triggering_actor }}
            Deploying: ${{ steps.check_arg.outputs.deploy_target }}
            Reference: ${{ github.ref_type }} ${{ github.ref_name }}
            Environment: ${{ steps.check_arg.outputs.env_type_cap }}
          exclude-workflow-initiator-as-approver: true
          additional-approved-words: ''
          additional-denied-words: ''

      - name: Variables in run
        run: |
          echo "env_type: ${{ steps.check_arg.outputs.env_type }}"
          echo "env_type_cap: ${{ steps.check_arg.outputs.env_type_cap }}"
          echo "docker_tag: ${{ steps.check_arg.outputs.docker_tag }}"
          echo "is_maintenance: ${{ steps.check_arg.outputs.is_maintenance }}"
          echo "build_time: ${{ steps.build_time.outputs.build_time}}"
          echo "maintenance_end_time: ${{github.event.inputs.maintenance_end_time }}"
          echo "version: ${{ steps.check_arg.outputs.env_type == 'prd' && github.ref_name || github.sha }}"

